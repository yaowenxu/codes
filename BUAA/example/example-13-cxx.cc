// c++ -std=c++11 example-13-cxx.cc -o out ; ./out ; rm out
// 主要讲解c++的 内联函数，构造函数，拷贝构造函数 和 赋值函数；
#include <iostream>
using namespace std;

// 内联函数将在编译时进行展开，从而消除了max为函数带来的开销。
inline int max(int a, int b)
{
    // 代码过长，编译器会忽略inline
    // 在类定义中的定义的函数都是内敛函数；
    return a > b ? a : b;
}

// C++ 构造函数
// 默认会加入的成员函数：默认构造函数，拷贝构造函数，析构函数，赋值函数（赋值运算符），取值函数。
// 构造函数可以被重载，可以多个，可以带参数。析构函数只有一个，不带参数。

// C++ 中3种对象需要复制；
// 一个对象以值传递的方式传入函数体；
// 一个对象以值传递的方式从函数返回；
// 一个对象需要通过另一个对象进行初始化。

// C++ 编译器什么时候会生成默认拷贝构造函数?
// 用户没有定义，但是代码中进行使用，生成默认构造函数；
// 当用户进行显式定义构造函数的时候，C++编译器不会再进行生成。

// C++ 生成的默认拷贝构造函数使用的浅拷贝：
// 当函数中变量使用堆内存时，浅拷贝后，指针指向同一块内存；
// 深拷贝后，指向的堆内存将同时被拷贝；
// 当进行实现深拷贝的时候，需要自定义拷贝构造函数。

// 赋值函数 与 拷贝构造函数 对比：
// 拷贝构造就是对一个对象初始化一块内存区域。赋值函数是对于一个已经被初始化的对象进行赋值操作。
// 在数据成员包含指针对象的时候，考虑复制与引用。拷贝构造函数大多情况下是赋值，赋值函数可考虑对原有对象的引用。
// 拷贝对象是初始化调用。赋值函数是将一个新的对象给一个原有的对象。
// 赋值函数，考虑是否释放原有内存；还要检测当前对象和原有对象是否是相同的对象，如果相同，可直接返回。

// 如果类定义中有指针、引用变量或对象，最好重载拷贝构造函数和赋值函数。

class A
{
public:
    A()
    {
        cout << "调用重载构造函数" << endl;
    }
    A(const A &other)
    {
        cout << "调用重载拷贝构造函数" << endl;
    }
    A &operator=(const A &a)
    {
        cout << "调用赋值函数" << endl;
    }
    ~A()
    {
        cout << "调用析构函数" << endl;
    }
}; // 对象

int main()
{
    cout << max(3, 2) << endl;
    A a;
    A b(a);
    b = a;
    cout << sizeof(a) << endl;
    return 0;
}